name: OpenAI PR Review for Digifly (DGF)

on:
  pull_request:
    types: [closed]
    branches: [ main ]

jobs:
  review:
    if: ${{ github.event.pull_request.merged == true }}
    runs-on: ubuntu-latest
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Collect PR metadata
        id: meta
        run: |
          echo "pr_number=${{ github.event.number }}" >> $GITHUB_OUTPUT
          echo "pr_title<<EOF" >> $GITHUB_OUTPUT
          echo "${{ github.event.pull_request.title }}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "pr_body<<EOF" >> $GITHUB_OUTPUT
          echo "${{ github.event.pull_request.body }}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "pr_head_sha=${{ github.event.pull_request.merge_commit_sha || github.event.pull_request.head.sha }}" >> $GITHUB_OUTPUT
          echo "pr_base_sha=${{ github.event.pull_request.base.sha }}" >> $GITHUB_OUTPUT
          echo "pr_head_ref=${{ github.event.pull_request.head.ref }}" >> $GITHUB_OUTPUT

      - name: Detect DGF task ID (e.g., DGF-123)
        id: task
        run: |
          set -e
          T="${{ steps.meta.outputs.pr_title }} ${{ steps.meta.outputs.pr_body }} ${{ steps.meta.outputs.pr_head_ref }}"
          TASK_ID="$(printf '%s' "$T" | grep -oE 'DGF-[0-9]+' | head -n1 || true)"
          echo "task_id=$TASK_ID" >> $GITHUB_OUTPUT
          echo "Detected task: ${TASK_ID:-<none>}"

      - name: Locate DGF spec file (optional)
        id: spec
        run: |
          set -e
          ID="${{ steps.task.outputs.task_id }}"
          FOUND=""
          if [ -n "$ID" ]; then
            for p in \
              "docs/specs/$ID.md" \
              "docs/specs/dgf/$ID.md" \
              ".github/tasks/$ID.md" \
              "specs/$ID.md" \
              "requirements/$ID.md"
            do
              if [ -f "$p" ]; then FOUND="$p"; break; fi
            done
          fi
          echo "spec_path=$FOUND" >> $GITHUB_OUTPUT
          if [ -n "$FOUND" ]; then
            echo "Using spec file: $FOUND"
          else
            echo "No spec file found (optional)."
          fi

      - name: Build diff between base and merge commit
        run: |
          BASE="${{ steps.meta.outputs.pr_base_sha }}"
          HEAD="${{ steps.meta.outputs.pr_head_sha }}"
          git diff --unified=0 "$BASE" "$HEAD" > code_diff.txt || true
          head -c 12000 code_diff.txt > code_diff_trunc.txt && mv code_diff_trunc.txt code_diff.txt
          echo -e "\n\n[Truncated if large]" >> code_diff.txt

      - name: Install jq
        run: |
          sudo apt-get update -y >/dev/null 2>&1 || true
          sudo apt-get install -y jq >/dev/null 2>&1 || true

      - name: Build prompt (DGF context + spec + diff)
        run: |
          PR_NUM="${{ steps.meta.outputs.pr_number }}"
          PR_TITLE="${{ steps.meta.outputs.pr_title }}"
          PR_BODY="${{ steps.meta.outputs.pr_body }}"
          TASK_ID="${{ steps.task.outputs.task_id }}"
          SPEC_PATH="${{ steps.spec.outputs.spec_path }}"

          {
            echo "DGF task context"
            echo "-----------------"
            echo "PR #$PR_NUM — $PR_TITLE"
            echo
            echo "PR description:"
            echo "$PR_BODY"
            echo
            if [ -n "$TASK_ID" ]; then
              echo "Detected task ID: $TASK_ID"
            else
              echo "Detected task ID: <none>"
            fi
            echo
            if [ -n "$SPEC_PATH" ]; then
              echo "Task spec ($SPEC_PATH):"
              echo '```markdown'
              sed -e 's/\r$//' "$SPEC_PATH"
              echo '```'
              echo
            fi
            echo "Diff"
            echo "----"
            echo '```diff'
            cat code_diff.txt
            echo '```'
            echo
            echo "Please review the implementation **against the DGF task context/spec above** and return:"
            echo "1) Does it meet the acceptance criteria (cite spec/PR lines/sections)?"
            echo "2) Risks & bugs/smells"
            echo "3) Breaking changes/migrations"
            echo "4) 3 concrete fixes/improvements (with file/line hints)"
            echo "Reply as concise markdown."
          } > prompt.txt

      - name: Build JSON payload
        run: |
          jq -n --rawfile prompt prompt.txt \
            '{
               model: "gpt-4o",
               messages: [
                 {role:"system","content":"You are a senior reviewer for Digifly (DGF). Be precise, pragmatic, and brief."},
                 {role:"user","content": $prompt}
               ]
             }' > payload.json

      - name: Ask ChatGPT for feedback (OpenAI)
        id: openai
        run: |
          set -e
          RESPONSE=$(curl -sS https://api.openai.com/v1/chat/completions \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "Content-Type: application/json" \
            --data @payload.json)
          echo "$RESPONSE" > response.json
          jq -r '.choices[0].message.content // "No content returned"' response.json > feedback.txt
          echo "------- ChatGPT feedback (preview) -------"
          head -n 100 feedback.txt

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dgf-pr-review
          path: |
            prompt.txt
            payload.json
            response.json
            code_diff.txt
            feedback.txt

      - name: Post to Microsoft Teams (with DGF header)
        if: ${{ success() && env.TEAMS_WEBHOOK_URL != '' }}
        env:
          TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL }}
        run: |
          SHORT_SHA="${GITHUB_SHA::7}"
          RUN_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          REPO="${{ github.repository }}"
          BRANCH="${{ github.ref_name }}"
          TASK_ID="${{ steps.task.outputs.task_id }}"
          PR_TITLE="${{ steps.meta.outputs.pr_title }}"

          # Build a descriptive title that includes DGF-XXX (or fallback)
          if [ -z "$TASK_ID" ]; then
            TITLE="ChatGPT DGF review: (no task id) — ${PR_TITLE}"
          else
            TITLE="ChatGPT DGF review: ${TASK_ID} — ${PR_TITLE}"
          fi

          # Truncate feedback to fit Teams payload limits
          head -c 6000 feedback.txt > feedback_trunc.txt

          jq -n \
            --arg title "$TITLE" \
            --arg repo "$REPO" \
            --arg branch "$BRANCH" \
            --arg sha "$SHORT_SHA" \
            --arg run_url "$RUN_URL" \
            --arg feedback "$(cat feedback_trunc.txt)" \
            '{
              "@type":"MessageCard",
              "@context":"https://schema.org/extensions",
              "summary":"DGF PR review",
              "themeColor":"7A4ED9",
              "title": $title,
              "sections":[{"text": $feedback}],
              "potentialAction":[
                {"@type":"OpenUri","name":"View workflow run","targets":[{"os":"default","uri": $run_url}]}
              ]
            }' > teams.json

          curl -sS -H "Content-Type: application/json" -d @teams.json "$TEAMS_WEBHOOK_URL" || true

      - name: Clean up temp files
        if: always()
        run: |
          rm -f prompt.txt payload.json response.json feedback.txt feedback_trunc.txt teams.json code_diff.txt || true
