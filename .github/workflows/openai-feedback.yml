name: OpenAI Feedback on Code Changes

on:
  push:
    branches: [ main ]  # skift hvis du vil overvåge andre branches

jobs:
  get-feedback:
    runs-on: ubuntu-latest
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine base and head SHAs
        id: shas
        run: |
          BEFORE="${{ github.event.before }}"
          AFTER="${{ github.sha }}"
          # Fallback hvis BEFORE er tom/0000… (fx første push på branchen)
          if [ -z "$BEFORE" ] || [[ "$BEFORE" == 0000000000000000000000000000000000000000 ]]; then
            BEFORE="$(git rev-parse "$AFTER~1" || true)"
          fi
          echo "before=$BEFORE" >> $GITHUB_OUTPUT
          echo "after=$AFTER" >> $GITHUB_OUTPUT

      - name: Get diff (compact, truncated)
        run: |
          BEFORE="${{ steps.shas.outputs.before }}"
          AFTER="${{ steps.shas.outputs.after }}"
          if [ -n "$BEFORE" ]; then
            git diff --unified=0 "$BEFORE" "$AFTER" > code_diff.txt || true
          else
            echo "No previous commit found; showing last 200 lines." > code_diff.txt
            git show --stat "$AFTER" >> code_diff.txt || true
          fi
          # Truncér store diffs for at holde payload lille
          head -c 12000 code_diff.txt > code_diff_trunc.txt
          mv code_diff_trunc.txt code_diff.txt
          echo -e "\n\n[Truncated if large]" >> code_diff.txt
          echo "----- Diff preview (last 40 lines) -----"
          tail -n 40 code_diff.txt || true

      - name: Install jq
        run: |
          sudo apt-get update -y >/dev/null 2>&1 || true
          sudo apt-get install -y jq >/dev/null 2>&1 || true

      - name: Build JSON payload (escaped, safe)
        run: |
          # Byg prompt i en fil for at undgå shell-/jq-quoting problemer
          {
            echo "Review these changes."
            echo "1) Risks"
            echo "2) Bugs/smells"
            echo "3) Breaking changes/migrations"
            echo "4) Give 3 concrete fixes with file/line hints."
            echo
            echo "Diff:"
            echo '```diff'
            cat code_diff.txt
            echo '```'
          } > prompt.txt

          # Brug --rawfile for at indlæse hele prompten korrekt escaped
          jq -n --rawfile prompt prompt.txt \
            '{
               model: "gpt-4o",
               messages: [
                 {role:"system", content:"You are a senior code review assistant. Be concise, actionable, and return markdown."},
                 {role:"user", content: $prompt}
               ]
             }' > payload.json
          echo "Payload built."

      - name: Ask ChatGPT for feedback (OpenAI)
        id: openai
        run: |
          set -e
          RESPONSE=$(curl -sS https://api.openai.com/v1/chat/completions \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "Content-Type: application/json" \
            --data @payload.json)
          echo "$RESPONSE" > response.json
          # Print kun selve svaret
          jq -r '.choices[0].message.content // "No content returned"' response.json > feedback.txt
          echo "------- ChatGPT feedback (preview) -------"
          head -n 80 feedback.txt

      - name: Upload artifacts (diff + response + feedback)
        uses: actions/upload-artifact@v4
        with:
          name: openai-feedback
          path: |
            code_diff.txt
            prompt.txt
            payload.json
            response.json
            feedback.txt

      # Teams-posting (brug env i if:)
      - name: Post feedback to Microsoft Teams
        if: ${{ success() && env.TEAMS_WEBHOOK_URL != '' }}
        env:
          TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL }}
        run: |
          SHORT_SHA="${GITHUB_SHA::7}"
          RUN_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          REPO="${{ github.repository }}"
          BRANCH="${{ github.ref_name }}"

          # Begræns længde (Teams payload-grænser)
          head -c 6000 feedback.txt > feedback_trunc.txt

          jq -n \
            --arg repo "$REPO" \
            --arg branch "$BRANCH" \
            --arg sha "$SHORT_SHA" \
            --arg run_url "$RUN_URL" \
            --arg feedback "$(cat feedback_trunc.txt)" \
            '{
              "@type":"MessageCard",
              "@context":"https://schema.org/extensions",
              "summary":"OpenAI code review",
              "themeColor":"0078D7",
              "title": ("ChatGPT code review: " + $repo + "@" + $branch + " (#" + $sha + ")"),
              "sections":[{"text": $feedback}],
              "potentialAction":[
                {"@type":"OpenUri","name":"View workflow run","targets":[{"os":"default","uri": $run_url}]}
              ]
            }' > teams.json

          curl -sS -H "Content-Type: application/json" -d @teams.json "$TEAMS_WEBHOOK_URL" || true
